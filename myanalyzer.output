Terminals unused in grammar

    KW_OF
    ASSIGNMENT_OPERATOR_PLUS_ASSIGN
    ASSIGNMENT_OPERATOR_MINUS_ASSIGN
    ASSIGNMENT_OPERATOR_MULTIPLICATION_ASSIGN
    ASSIGNMENT_OPERATOR_DIVISION_ASSIGN
    ASSIGNMENT_OPERATOR_MODULO_ASSIGN
    ASSIGNMENT_OPERATOR_COLON_ASSIGN
    D_DOT


Grammar

    0 $accept: input $end

    1 input: program_template

    2 program_template: main_func
    3                 | comp_decl main_func
    4                 | const_decl main_func
    5                 | var_decl main_func
    6                 | func_decl main_func
    7                 | comp_decl const_decl var_decl func_decl main_func
    8                 | comp_decl const_decl var_decl main_func
    9                 | comp_decl const_decl func_decl main_func
   10                 | comp_decl var_decl func_decl main_func
   11                 | const_decl var_decl func_decl main_func
   12                 | comp_decl const_decl main_func
   13                 | comp_decl var_decl main_func
   14                 | comp_decl func_decl main_func
   15                 | const_decl var_decl main_func
   16                 | const_decl func_decl main_func
   17                 | var_decl func_decl main_func

   18 main_func: KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON

   19 comp_decl: single_comp
   20          | comp_decl single_comp

   21 single_comp: KW_COMP TK_IDENTIFIER D_COLON comp_var_decl KW_ENDCOMP D_SEMICOLON
   22            | KW_COMP TK_IDENTIFIER D_COLON func_decl KW_ENDCOMP D_SEMICOLON
   23            | KW_COMP TK_IDENTIFIER D_COLON comp_var_decl func_decl KW_ENDCOMP D_SEMICOLON

   24 comp_var_decl: single_var
   25              | comp_var_decl single_var

   26 var_decl: single_var
   27         | var_decl single_var

   28 single_var: declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | declarations D_COLON KW_STR D_SEMICOLON
   31           | declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON

   38 const_decl: single_const
   39           | const_decl single_const

   40 single_const: KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON

   48 declarations: assign_vars
   49             | ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | assign_vars D_COMMA declarations
   51             | ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations

   52 assign_vars: TK_IDENTIFIER
   53            | TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression

   55 expression: logic_expression

   56 logic_expression: arithmetic_expression
   57                 | logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | logic_expression KW_AND arithmetic_expression
   64                 | logic_expression KW_OR arithmetic_expression
   65                 | KW_NOT arithmetic_expression

   66 arithmetic_expression: complex_expression
   67                      | arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression

   73 complex_expression: TK_IDENTIFIER
   74                   | TK_CONST_INT
   75                   | TK_CONST_FLOAT
   76                   | TK_CONST_STRING
   77                   | KW_TRUE
   78                   | KW_FALSE
   79                   | D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

   84 statement: assignment_statement
   85          | if_statement
   86          | while_statement
   87          | for_statement
   88          | func_call
   89          | KW_BREAK D_SEMICOLON
   90          | KW_CONTINUE D_SEMICOLON
   91          | KW_RETURN D_SEMICOLON
   92          | KW_RETURN expression D_SEMICOLON

   93 assignment_statement: TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON

   95 if_statement: KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON

   99 while_statement: KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON

  100 else_clause: KW_ELSE D_COLON code

  101 code: statement code
  102     | single_var code
  103     | single_const code
  104     | ε

  105 func_call: TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

  106 function_input: ε
  107               | function_input D_COMMA expression
  108               | expression

  109 func_decl: single_function
  110          | func_decl single_function

  111 single_function: KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

  112 func_arguments: single_argument
  113               | single_argument D_COMMA func_arguments

  114 single_argument: ε
  115                | TK_IDENTIFIER D_COLON KW_INTEGER
  116                | TK_IDENTIFIER D_COLON KW_SCALAR
  117                | TK_IDENTIFIER D_COLON KW_STR
  118                | TK_IDENTIFIER D_COLON KW_BOOLEAN
  119                | TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_INTEGER
  120                | TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_SCALAR
  121                | TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_STR
  122                | TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_BOOLEAN
  123                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER
  124                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR
  125                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR
  126                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN

  127 return: ε
  128       | ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_INTEGER
  129       | ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_STR
  130       | ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_SCALAR
  131       | ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_BOOLEAN

  132 func_code: var_decl const_decl statements
  133          | var_decl statements
  134          | const_decl statements
  135          | statements

  136 statements: statement
  137           | statement statements


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ident (258)
    TK_IDENTIFIER <str> (259) 21 22 23 32 37 52 53 54 73 82 83 93 94 97 98 105 111 115 116 117 118 119 120 121 122 123 124 125 126
    TK_CONST_INT <str> (260) 33 34 35 36 37 44 45 46 47 74 123 124 125 126
    TK_CONST_FLOAT <str> (261) 75
    TK_CONST_STRING <str> (262) 76
    ASSIGNMENT_OPERATOR_ARROW_ASSIGN (263) 128 129 130 131
    KW_INTEGER (264) 28 33 40 44 115 119 123 128
    KW_SCALAR (265) 29 34 41 45 116 120 124 130
    KW_STR (266) 30 35 42 46 117 121 125 129
    KW_BOOLEAN (267) 31 36 43 47 118 122 126 131
    KW_TRUE (268) 77
    KW_FALSE (269) 78
    KW_CONST (270) 40 41 42 43 44 45 46 47
    KW_IF (271) 95 96
    KW_ELSE (272) 100
    KW_ENDIF (273) 95 96
    KW_FOR (274) 97 98
    KW_IN (275) 97 98
    KW_ENDFOR (276) 97 98
    KW_WHILE (277) 99
    KW_ENDWHILE (278) 99
    KW_BREAK (279) 89
    KW_CONTINUE (280) 90
    KW_NOT (281) 65
    KW_DEF (282) 18 111
    KW_ENDDEF (283) 18 111
    KW_MAIN (284) 18
    KW_RETURN (285) 91 92
    KW_COMP (286) 21 22 23
    KW_ENDCOMP (287) 21 22 23
    KW_OF (288)
    D_SEMICOLON (289) 18 21 22 23 28 29 30 31 32 33 34 35 36 37 40 41 42 43 44 45 46 47 89 90 91 92 93 94 95 96 97 98 99 105 111
    D_COMMA (290) 50 51 107 113
    D_COLON (291) 18 21 22 23 28 29 30 31 32 33 34 35 36 37 40 41 42 43 44 45 46 47 95 96 97 98 99 100 111 115 116 117 118 119 120 121 122 123 124 125 126
    RELATIONAL_OPERATOR_MORE_EQUALS (292) 61
    RELATIONAL_OPERATOR_LESS_EQUALS (293) 62
    RELATIONAL_OPERATOR_EQUALS (294) 57
    RELATIONAL_OPERATOR_NOTEQUALS (295) 58
    ASSIGNMENT_OPERATOR_PLUS_ASSIGN (296)
    ASSIGNMENT_OPERATOR_MINUS_ASSIGN (297)
    ASSIGNMENT_OPERATOR_MULTIPLICATION_ASSIGN (298)
    ASSIGNMENT_OPERATOR_DIVISION_ASSIGN (299)
    ASSIGNMENT_OPERATOR_MODULO_ASSIGN (300)
    ASSIGNMENT_OPERATOR_COLON_ASSIGN (301)
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN (302) 49 51
    ASSIGNMENT_OPERATOR_ASSIGN (303) 54 93 94
    ARITHMETIC_OPERATOR_EXP (304) 72
    not_sure (305)
    ARITHMETIC_OPERATOR_PLUS (306) 67 81
    ARITHMETIC_OPERATOR_MINUS (307) 68 80
    ARITHMETIC_OPERATOR_MULT (308) 69
    ARITHMETIC_OPERATOR_DIVISION (309) 70
    ARITHMETIC_OPERATOR_MODULO (310) 71
    RELATIONAL_OPERATOR_LESS (311) 60
    RELATIONAL_OPERATOR_MORE (312) 59
    D_LEFT_PARENTHESIS (313) 18 79 83 95 96 99 105 111
    D_RIGHT_PARENTHESIS (314) 18 79 83 95 96 99 105 111
    D_LEFT_BLOCK (315) 33 34 35 36 37 44 45 46 47 53 82 94 97 98 119 120 121 122 123 124 125 126
    D_RIGHT_BLOCK (316) 33 34 35 36 37 44 45 46 47 53 82 94 97 98 119 120 121 122 123 124 125 126
    D_DOT (317)
    KW_AND (318) 63
    KW_OR (319) 64
    Else (320)


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    input <str> (67)
        on left: 1
        on right: 0
    program_template <str> (68)
        on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
        on right: 1
    main_func <str> (69)
        on left: 18
        on right: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
    comp_decl <str> (70)
        on left: 19 20
        on right: 3 7 8 9 10 12 13 14 20
    single_comp <str> (71)
        on left: 21 22 23
        on right: 19 20
    comp_var_decl <str> (72)
        on left: 24 25
        on right: 21 23 25
    var_decl <str> (73)
        on left: 26 27
        on right: 5 7 8 10 11 13 15 17 27 132 133
    single_var <str> (74)
        on left: 28 29 30 31 32 33 34 35 36 37
        on right: 24 25 26 27 102
    const_decl <str> (75)
        on left: 38 39
        on right: 4 7 8 9 11 12 15 16 39 132 134
    single_const <str> (76)
        on left: 40 41 42 43 44 45 46 47
        on right: 38 39 103
    declarations <str> (77)
        on left: 48 49 50 51
        on right: 28 29 30 31 32 33 34 35 36 37 40 41 42 43 44 45 46 47 50 51
    assign_vars <str> (78)
        on left: 52 53 54
        on right: 48 49 50 51
    expression <str> (79)
        on left: 55
        on right: 53 54 79 82 92 93 94 95 96 99 107 108
    logic_expression <str> (80)
        on left: 56 57 58 59 60 61 62 63 64 65
        on right: 55 57 58 59 60 61 62 63 64
    arithmetic_expression <str> (81)
        on left: 66 67 68 69 70 71 72
        on right: 56 57 58 59 60 61 62 63 64 65 67 68 69 70 71 72 80 81 97 98
    complex_expression <str> (82)
        on left: 73 74 75 76 77 78 79 80 81 82 83
        on right: 66 67 68 69 70 71 72
    statement <str> (83)
        on left: 84 85 86 87 88 89 90 91 92
        on right: 101 136 137
    assignment_statement <str> (84)
        on left: 93 94
        on right: 84
    if_statement <str> (85)
        on left: 95 96
        on right: 85
    for_statement <str> (86)
        on left: 97 98
        on right: 87
    while_statement <str> (87)
        on left: 99
        on right: 86
    else_clause <str> (88)
        on left: 100
        on right: 96
    code <str> (89)
        on left: 101 102 103 104
        on right: 18 95 96 97 98 99 100 101 102 103
    func_call <str> (90)
        on left: 105
        on right: 88
    function_input <str> (91)
        on left: 106 107 108
        on right: 83 105 107
    func_decl <str> (92)
        on left: 109 110
        on right: 6 7 9 10 11 14 16 17 22 23 110
    single_function <str> (93)
        on left: 111
        on right: 109 110
    func_arguments <str> (94)
        on left: 112 113
        on right: 111 113
    single_argument <str> (95)
        on left: 114 115 116 117 118 119 120 121 122 123 124 125 126
        on right: 112 113
    return <str> (96)
        on left: 127 128 129 130 131
        on right: 111
    func_code <str> (97)
        on left: 132 133 134 135
        on right: 111
    statements <str> (98)
        on left: 136 137
        on right: 132 133 134 135 137


State 0

    0 $accept: • input $end
    1 input: • program_template
    2 program_template: • main_func
    3                 | • comp_decl main_func
    4                 | • const_decl main_func
    5                 | • var_decl main_func
    6                 | • func_decl main_func
    7                 | • comp_decl const_decl var_decl func_decl main_func
    8                 | • comp_decl const_decl var_decl main_func
    9                 | • comp_decl const_decl func_decl main_func
   10                 | • comp_decl var_decl func_decl main_func
   11                 | • const_decl var_decl func_decl main_func
   12                 | • comp_decl const_decl main_func
   13                 | • comp_decl var_decl main_func
   14                 | • comp_decl func_decl main_func
   15                 | • const_decl var_decl main_func
   16                 | • const_decl func_decl main_func
   17                 | • var_decl func_decl main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
   19 comp_decl: • single_comp
   20          | • comp_decl single_comp
   21 single_comp: • KW_COMP TK_IDENTIFIER D_COLON comp_var_decl KW_ENDCOMP D_SEMICOLON
   22            | • KW_COMP TK_IDENTIFIER D_COLON func_decl KW_ENDCOMP D_SEMICOLON
   23            | • KW_COMP TK_IDENTIFIER D_COLON comp_var_decl func_decl KW_ENDCOMP D_SEMICOLON
   26 var_decl: • single_var
   27         | • var_decl single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   38 const_decl: • single_const
   39           | • const_decl single_const
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
  109 func_decl: • single_function
  110          | • func_decl single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 1
    KW_CONST                            shift, and go to state 2
    KW_DEF                              shift, and go to state 3
    KW_COMP                             shift, and go to state 4
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    input             go to state 6
    program_template  go to state 7
    main_func         go to state 8
    comp_decl         go to state 9
    single_comp       go to state 10
    var_decl          go to state 11
    single_var        go to state 12
    const_decl        go to state 13
    single_const      go to state 14
    declarations      go to state 15
    assign_vars       go to state 16
    func_decl         go to state 17
    single_function   go to state 18


State 1

   52 assign_vars: TK_IDENTIFIER •  [D_COMMA, D_COLON]
   53            | TK_IDENTIFIER • D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | TK_IDENTIFIER • ASSIGNMENT_OPERATOR_ASSIGN expression

    ASSIGNMENT_OPERATOR_ASSIGN  shift, and go to state 19
    D_LEFT_BLOCK                shift, and go to state 20

    $default  reduce using rule 52 (assign_vars)

    Conflict between rule 52 and token D_LEFT_BLOCK resolved as shift (not_sure < D_LEFT_BLOCK).


State 2

   40 single_const: KW_CONST • declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | KW_CONST • declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | KW_CONST • declarations D_COLON KW_STR D_SEMICOLON
   43             | KW_CONST • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | KW_CONST • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | KW_CONST • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | KW_CONST • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | KW_CONST • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression

    TK_IDENTIFIER                       shift, and go to state 1
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    declarations  go to state 21
    assign_vars   go to state 16


State 3

   18 main_func: KW_DEF • KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
  111 single_function: KW_DEF • TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER  shift, and go to state 22
    KW_MAIN        shift, and go to state 23


State 4

   21 single_comp: KW_COMP • TK_IDENTIFIER D_COLON comp_var_decl KW_ENDCOMP D_SEMICOLON
   22            | KW_COMP • TK_IDENTIFIER D_COLON func_decl KW_ENDCOMP D_SEMICOLON
   23            | KW_COMP • TK_IDENTIFIER D_COLON comp_var_decl func_decl KW_ENDCOMP D_SEMICOLON

    TK_IDENTIFIER  shift, and go to state 24


State 5

   49 declarations: ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN • assign_vars
   51             | ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN • assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression

    TK_IDENTIFIER  shift, and go to state 1

    assign_vars  go to state 25


State 6

    0 $accept: input • $end

    $end  shift, and go to state 26


State 7

    1 input: program_template •

    $default  reduce using rule 1 (input)


State 8

    2 program_template: main_func •

    $default  reduce using rule 2 (program_template)


State 9

    3 program_template: comp_decl • main_func
    7                 | comp_decl • const_decl var_decl func_decl main_func
    8                 | comp_decl • const_decl var_decl main_func
    9                 | comp_decl • const_decl func_decl main_func
   10                 | comp_decl • var_decl func_decl main_func
   12                 | comp_decl • const_decl main_func
   13                 | comp_decl • var_decl main_func
   14                 | comp_decl • func_decl main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
   20 comp_decl: comp_decl • single_comp
   21 single_comp: • KW_COMP TK_IDENTIFIER D_COLON comp_var_decl KW_ENDCOMP D_SEMICOLON
   22            | • KW_COMP TK_IDENTIFIER D_COLON func_decl KW_ENDCOMP D_SEMICOLON
   23            | • KW_COMP TK_IDENTIFIER D_COLON comp_var_decl func_decl KW_ENDCOMP D_SEMICOLON
   26 var_decl: • single_var
   27         | • var_decl single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   38 const_decl: • single_const
   39           | • const_decl single_const
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
  109 func_decl: • single_function
  110          | • func_decl single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 1
    KW_CONST                            shift, and go to state 2
    KW_DEF                              shift, and go to state 3
    KW_COMP                             shift, and go to state 4
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    main_func        go to state 27
    single_comp      go to state 28
    var_decl         go to state 29
    single_var       go to state 12
    const_decl       go to state 30
    single_const     go to state 14
    declarations     go to state 15
    assign_vars      go to state 16
    func_decl        go to state 31
    single_function  go to state 18


State 10

   19 comp_decl: single_comp •

    $default  reduce using rule 19 (comp_decl)


State 11

    5 program_template: var_decl • main_func
   17                 | var_decl • func_decl main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
   27 var_decl: var_decl • single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
  109 func_decl: • single_function
  110          | • func_decl single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 1
    KW_DEF                              shift, and go to state 3
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    main_func        go to state 32
    single_var       go to state 33
    declarations     go to state 15
    assign_vars      go to state 16
    func_decl        go to state 34
    single_function  go to state 18


State 12

   26 var_decl: single_var •

    $default  reduce using rule 26 (var_decl)


State 13

    4 program_template: const_decl • main_func
   11                 | const_decl • var_decl func_decl main_func
   15                 | const_decl • var_decl main_func
   16                 | const_decl • func_decl main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
   26 var_decl: • single_var
   27         | • var_decl single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   39 const_decl: const_decl • single_const
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
  109 func_decl: • single_function
  110          | • func_decl single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 1
    KW_CONST                            shift, and go to state 2
    KW_DEF                              shift, and go to state 3
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    main_func        go to state 35
    var_decl         go to state 36
    single_var       go to state 12
    single_const     go to state 37
    declarations     go to state 15
    assign_vars      go to state 16
    func_decl        go to state 38
    single_function  go to state 18


State 14

   38 const_decl: single_const •

    $default  reduce using rule 38 (const_decl)


State 15

   28 single_var: declarations • D_COLON KW_INTEGER D_SEMICOLON
   29           | declarations • D_COLON KW_SCALAR D_SEMICOLON
   30           | declarations • D_COLON KW_STR D_SEMICOLON
   31           | declarations • D_COLON KW_BOOLEAN D_SEMICOLON
   32           | declarations • D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | declarations • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | declarations • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | declarations • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | declarations • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | declarations • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON

    D_COLON       shift, and go to state 39
    D_LEFT_BLOCK  shift, and go to state 40


State 16

   48 declarations: assign_vars •  [D_COLON, D_LEFT_BLOCK]
   50             | assign_vars • D_COMMA declarations

    D_COMMA  shift, and go to state 41

    $default  reduce using rule 48 (declarations)


State 17

    6 program_template: func_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
  110 func_decl: func_decl • single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    KW_DEF  shift, and go to state 3

    main_func        go to state 42
    single_function  go to state 43


State 18

  109 func_decl: single_function •

    $default  reduce using rule 109 (func_decl)


State 19

   54 assign_vars: TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN • expression
   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 54
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 20

   53 assign_vars: TK_IDENTIFIER D_LEFT_BLOCK • expression D_RIGHT_BLOCK
   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 58
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 21

   40 single_const: KW_CONST declarations • D_COLON KW_INTEGER D_SEMICOLON
   41             | KW_CONST declarations • D_COLON KW_SCALAR D_SEMICOLON
   42             | KW_CONST declarations • D_COLON KW_STR D_SEMICOLON
   43             | KW_CONST declarations • D_COLON KW_BOOLEAN D_SEMICOLON
   44             | KW_CONST declarations • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | KW_CONST declarations • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | KW_CONST declarations • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | KW_CONST declarations • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON

    D_COLON       shift, and go to state 59
    D_LEFT_BLOCK  shift, and go to state 60


State 22

  111 single_function: KW_DEF TK_IDENTIFIER • D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    D_LEFT_PARENTHESIS  shift, and go to state 61


State 23

   18 main_func: KW_DEF KW_MAIN • D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON

    D_LEFT_PARENTHESIS  shift, and go to state 62


State 24

   21 single_comp: KW_COMP TK_IDENTIFIER • D_COLON comp_var_decl KW_ENDCOMP D_SEMICOLON
   22            | KW_COMP TK_IDENTIFIER • D_COLON func_decl KW_ENDCOMP D_SEMICOLON
   23            | KW_COMP TK_IDENTIFIER • D_COLON comp_var_decl func_decl KW_ENDCOMP D_SEMICOLON

    D_COLON  shift, and go to state 63


State 25

   49 declarations: ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars •  [D_COLON, D_LEFT_BLOCK]
   51             | ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars • D_COMMA declarations

    D_COMMA  shift, and go to state 64

    $default  reduce using rule 49 (declarations)


State 26

    0 $accept: input $end •

    $default  accept


State 27

    3 program_template: comp_decl main_func •

    $default  reduce using rule 3 (program_template)


State 28

   20 comp_decl: comp_decl single_comp •

    $default  reduce using rule 20 (comp_decl)


State 29

   10 program_template: comp_decl var_decl • func_decl main_func
   13                 | comp_decl var_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
   27 var_decl: var_decl • single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
  109 func_decl: • single_function
  110          | • func_decl single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 1
    KW_DEF                              shift, and go to state 3
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    main_func        go to state 65
    single_var       go to state 33
    declarations     go to state 15
    assign_vars      go to state 16
    func_decl        go to state 66
    single_function  go to state 18


State 30

    7 program_template: comp_decl const_decl • var_decl func_decl main_func
    8                 | comp_decl const_decl • var_decl main_func
    9                 | comp_decl const_decl • func_decl main_func
   12                 | comp_decl const_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
   26 var_decl: • single_var
   27         | • var_decl single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   39 const_decl: const_decl • single_const
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
  109 func_decl: • single_function
  110          | • func_decl single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 1
    KW_CONST                            shift, and go to state 2
    KW_DEF                              shift, and go to state 3
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    main_func        go to state 67
    var_decl         go to state 68
    single_var       go to state 12
    single_const     go to state 37
    declarations     go to state 15
    assign_vars      go to state 16
    func_decl        go to state 69
    single_function  go to state 18


State 31

   14 program_template: comp_decl func_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
  110 func_decl: func_decl • single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    KW_DEF  shift, and go to state 3

    main_func        go to state 70
    single_function  go to state 43


State 32

    5 program_template: var_decl main_func •

    $default  reduce using rule 5 (program_template)


State 33

   27 var_decl: var_decl single_var •

    $default  reduce using rule 27 (var_decl)


State 34

   17 program_template: var_decl func_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
  110 func_decl: func_decl • single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    KW_DEF  shift, and go to state 3

    main_func        go to state 71
    single_function  go to state 43


State 35

    4 program_template: const_decl main_func •

    $default  reduce using rule 4 (program_template)


State 36

   11 program_template: const_decl var_decl • func_decl main_func
   15                 | const_decl var_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
   27 var_decl: var_decl • single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
  109 func_decl: • single_function
  110          | • func_decl single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 1
    KW_DEF                              shift, and go to state 3
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    main_func        go to state 72
    single_var       go to state 33
    declarations     go to state 15
    assign_vars      go to state 16
    func_decl        go to state 73
    single_function  go to state 18


State 37

   39 const_decl: const_decl single_const •

    $default  reduce using rule 39 (const_decl)


State 38

   16 program_template: const_decl func_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
  110 func_decl: func_decl • single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    KW_DEF  shift, and go to state 3

    main_func        go to state 74
    single_function  go to state 43


State 39

   28 single_var: declarations D_COLON • KW_INTEGER D_SEMICOLON
   29           | declarations D_COLON • KW_SCALAR D_SEMICOLON
   30           | declarations D_COLON • KW_STR D_SEMICOLON
   31           | declarations D_COLON • KW_BOOLEAN D_SEMICOLON
   32           | declarations D_COLON • TK_IDENTIFIER D_SEMICOLON

    TK_IDENTIFIER  shift, and go to state 75
    KW_INTEGER     shift, and go to state 76
    KW_SCALAR      shift, and go to state 77
    KW_STR         shift, and go to state 78
    KW_BOOLEAN     shift, and go to state 79


State 40

   33 single_var: declarations D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | declarations D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | declarations D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | declarations D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | declarations D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON

    TK_CONST_INT  shift, and go to state 80


State 41

   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   50             | assign_vars D_COMMA • declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression

    TK_IDENTIFIER                       shift, and go to state 1
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    declarations  go to state 81
    assign_vars   go to state 16


State 42

    6 program_template: func_decl main_func •

    $default  reduce using rule 6 (program_template)


State 43

  110 func_decl: func_decl single_function •

    $default  reduce using rule 110 (func_decl)


State 44

   73 complex_expression: TK_IDENTIFIER •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, ARITHMETIC_OPERATOR_EXP, ARITHMETIC_OPERATOR_PLUS, ARITHMETIC_OPERATOR_MINUS, ARITHMETIC_OPERATOR_MULT, ARITHMETIC_OPERATOR_DIVISION, ARITHMETIC_OPERATOR_MODULO, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_RIGHT_BLOCK, KW_AND, KW_OR]
   82                   | TK_IDENTIFIER • D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | TK_IDENTIFIER • D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    D_LEFT_PARENTHESIS  shift, and go to state 82
    D_LEFT_BLOCK        shift, and go to state 83

    $default  reduce using rule 73 (complex_expression)

    Conflict between rule 73 and token D_LEFT_BLOCK resolved as shift (ident < D_LEFT_BLOCK).


State 45

   74 complex_expression: TK_CONST_INT •

    $default  reduce using rule 74 (complex_expression)


State 46

   75 complex_expression: TK_CONST_FLOAT •

    $default  reduce using rule 75 (complex_expression)


State 47

   76 complex_expression: TK_CONST_STRING •

    $default  reduce using rule 76 (complex_expression)


State 48

   77 complex_expression: KW_TRUE •

    $default  reduce using rule 77 (complex_expression)


State 49

   78 complex_expression: KW_FALSE •

    $default  reduce using rule 78 (complex_expression)


State 50

   65 logic_expression: KW_NOT • arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 84
    complex_expression     go to state 57


State 51

   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   81                   | ARITHMETIC_OPERATOR_PLUS • arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 85
    complex_expression     go to state 57


State 52

   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   80                   | ARITHMETIC_OPERATOR_MINUS • arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 86
    complex_expression     go to state 57


State 53

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   79                   | D_LEFT_PARENTHESIS • expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 87
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 54

   54 assign_vars: TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression •

    $default  reduce using rule 54 (assign_vars)


State 55

   55 expression: logic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK]
   57 logic_expression: logic_expression • RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | logic_expression • RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | logic_expression • RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | logic_expression • RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | logic_expression • RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | logic_expression • RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | logic_expression • KW_AND arithmetic_expression
   64                 | logic_expression • KW_OR arithmetic_expression

    RELATIONAL_OPERATOR_MORE_EQUALS  shift, and go to state 88
    RELATIONAL_OPERATOR_LESS_EQUALS  shift, and go to state 89
    RELATIONAL_OPERATOR_EQUALS       shift, and go to state 90
    RELATIONAL_OPERATOR_NOTEQUALS    shift, and go to state 91
    RELATIONAL_OPERATOR_LESS         shift, and go to state 92
    RELATIONAL_OPERATOR_MORE         shift, and go to state 93
    KW_AND                           shift, and go to state 94
    KW_OR                            shift, and go to state 95

    $default  reduce using rule 55 (expression)


State 56

   56 logic_expression: arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]
   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 56 (logic_expression)


State 57

   66 arithmetic_expression: complex_expression •

    $default  reduce using rule 66 (arithmetic_expression)


State 58

   53 assign_vars: TK_IDENTIFIER D_LEFT_BLOCK expression • D_RIGHT_BLOCK

    D_RIGHT_BLOCK  shift, and go to state 102


State 59

   40 single_const: KW_CONST declarations D_COLON • KW_INTEGER D_SEMICOLON
   41             | KW_CONST declarations D_COLON • KW_SCALAR D_SEMICOLON
   42             | KW_CONST declarations D_COLON • KW_STR D_SEMICOLON
   43             | KW_CONST declarations D_COLON • KW_BOOLEAN D_SEMICOLON

    KW_INTEGER  shift, and go to state 103
    KW_SCALAR   shift, and go to state 104
    KW_STR      shift, and go to state 105
    KW_BOOLEAN  shift, and go to state 106


State 60

   44 single_const: KW_CONST declarations D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | KW_CONST declarations D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | KW_CONST declarations D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | KW_CONST declarations D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON

    TK_CONST_INT  shift, and go to state 107


State 61

  111 single_function: KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS • func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON
  112 func_arguments: • single_argument
  113               | • single_argument D_COMMA func_arguments
  114 single_argument: ε •  [D_COMMA, D_RIGHT_PARENTHESIS]
  115                | • TK_IDENTIFIER D_COLON KW_INTEGER
  116                | • TK_IDENTIFIER D_COLON KW_SCALAR
  117                | • TK_IDENTIFIER D_COLON KW_STR
  118                | • TK_IDENTIFIER D_COLON KW_BOOLEAN
  119                | • TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_INTEGER
  120                | • TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_SCALAR
  121                | • TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_STR
  122                | • TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_BOOLEAN
  123                | • TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER
  124                | • TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR
  125                | • TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR
  126                | • TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN

    TK_IDENTIFIER  shift, and go to state 108

    $default  reduce using rule 114 (single_argument)

    func_arguments   go to state 109
    single_argument  go to state 110


State 62

   18 main_func: KW_DEF KW_MAIN D_LEFT_PARENTHESIS • D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON

    D_RIGHT_PARENTHESIS  shift, and go to state 111


State 63

   21 single_comp: KW_COMP TK_IDENTIFIER D_COLON • comp_var_decl KW_ENDCOMP D_SEMICOLON
   22            | KW_COMP TK_IDENTIFIER D_COLON • func_decl KW_ENDCOMP D_SEMICOLON
   23            | KW_COMP TK_IDENTIFIER D_COLON • comp_var_decl func_decl KW_ENDCOMP D_SEMICOLON
   24 comp_var_decl: • single_var
   25              | • comp_var_decl single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
  109 func_decl: • single_function
  110          | • func_decl single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 1
    KW_DEF                              shift, and go to state 112
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    comp_var_decl    go to state 113
    single_var       go to state 114
    declarations     go to state 15
    assign_vars      go to state 16
    func_decl        go to state 115
    single_function  go to state 18


State 64

   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   51             | ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA • declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression

    TK_IDENTIFIER                       shift, and go to state 1
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    declarations  go to state 116
    assign_vars   go to state 16


State 65

   13 program_template: comp_decl var_decl main_func •

    $default  reduce using rule 13 (program_template)


State 66

   10 program_template: comp_decl var_decl func_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
  110 func_decl: func_decl • single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    KW_DEF  shift, and go to state 3

    main_func        go to state 117
    single_function  go to state 43


State 67

   12 program_template: comp_decl const_decl main_func •

    $default  reduce using rule 12 (program_template)


State 68

    7 program_template: comp_decl const_decl var_decl • func_decl main_func
    8                 | comp_decl const_decl var_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
   27 var_decl: var_decl • single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
  109 func_decl: • single_function
  110          | • func_decl single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 1
    KW_DEF                              shift, and go to state 3
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    main_func        go to state 118
    single_var       go to state 33
    declarations     go to state 15
    assign_vars      go to state 16
    func_decl        go to state 119
    single_function  go to state 18


State 69

    9 program_template: comp_decl const_decl func_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
  110 func_decl: func_decl • single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    KW_DEF  shift, and go to state 3

    main_func        go to state 120
    single_function  go to state 43


State 70

   14 program_template: comp_decl func_decl main_func •

    $default  reduce using rule 14 (program_template)


State 71

   17 program_template: var_decl func_decl main_func •

    $default  reduce using rule 17 (program_template)


State 72

   15 program_template: const_decl var_decl main_func •

    $default  reduce using rule 15 (program_template)


State 73

   11 program_template: const_decl var_decl func_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
  110 func_decl: func_decl • single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    KW_DEF  shift, and go to state 3

    main_func        go to state 121
    single_function  go to state 43


State 74

   16 program_template: const_decl func_decl main_func •

    $default  reduce using rule 16 (program_template)


State 75

   32 single_var: declarations D_COLON TK_IDENTIFIER • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 122


State 76

   28 single_var: declarations D_COLON KW_INTEGER • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 123


State 77

   29 single_var: declarations D_COLON KW_SCALAR • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 124


State 78

   30 single_var: declarations D_COLON KW_STR • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 125


State 79

   31 single_var: declarations D_COLON KW_BOOLEAN • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 126


State 80

   33 single_var: declarations D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | declarations D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | declarations D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | declarations D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | declarations D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON

    D_RIGHT_BLOCK  shift, and go to state 127


State 81

   50 declarations: assign_vars D_COMMA declarations •

    $default  reduce using rule 50 (declarations)


State 82

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   83                   | TK_IDENTIFIER D_LEFT_PARENTHESIS • function_input D_RIGHT_PARENTHESIS
  106 function_input: ε •  [D_COMMA, D_RIGHT_PARENTHESIS]
  107               | • function_input D_COMMA expression
  108               | • expression

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    $default  reduce using rule 106 (function_input)

    expression             go to state 128
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57
    function_input         go to state 129


State 83

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   82                   | TK_IDENTIFIER D_LEFT_BLOCK • expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 130
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 84

   65 logic_expression: KW_NOT arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]
   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 65 (logic_expression)


State 85

   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression
   81 complex_expression: ARITHMETIC_OPERATOR_PLUS arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, ARITHMETIC_OPERATOR_EXP, ARITHMETIC_OPERATOR_PLUS, ARITHMETIC_OPERATOR_MINUS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]

    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 81 (complex_expression)

    Conflict between rule 81 and token ARITHMETIC_OPERATOR_EXP resolved as reduce (ARITHMETIC_OPERATOR_EXP < ARITHMETIC_OPERATOR_PLUS).
    Conflict between rule 81 and token ARITHMETIC_OPERATOR_PLUS resolved as reduce (%left ARITHMETIC_OPERATOR_PLUS).
    Conflict between rule 81 and token ARITHMETIC_OPERATOR_MINUS resolved as reduce (%left ARITHMETIC_OPERATOR_MINUS).
    Conflict between rule 81 and token ARITHMETIC_OPERATOR_MULT resolved as shift (ARITHMETIC_OPERATOR_PLUS < ARITHMETIC_OPERATOR_MULT).
    Conflict between rule 81 and token ARITHMETIC_OPERATOR_DIVISION resolved as shift (ARITHMETIC_OPERATOR_PLUS < ARITHMETIC_OPERATOR_DIVISION).
    Conflict between rule 81 and token ARITHMETIC_OPERATOR_MODULO resolved as shift (ARITHMETIC_OPERATOR_PLUS < ARITHMETIC_OPERATOR_MODULO).


State 86

   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression
   80 complex_expression: ARITHMETIC_OPERATOR_MINUS arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, ARITHMETIC_OPERATOR_EXP, ARITHMETIC_OPERATOR_PLUS, ARITHMETIC_OPERATOR_MINUS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]

    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 80 (complex_expression)

    Conflict between rule 80 and token ARITHMETIC_OPERATOR_EXP resolved as reduce (ARITHMETIC_OPERATOR_EXP < ARITHMETIC_OPERATOR_MINUS).
    Conflict between rule 80 and token ARITHMETIC_OPERATOR_PLUS resolved as reduce (%left ARITHMETIC_OPERATOR_PLUS).
    Conflict between rule 80 and token ARITHMETIC_OPERATOR_MINUS resolved as reduce (%left ARITHMETIC_OPERATOR_MINUS).
    Conflict between rule 80 and token ARITHMETIC_OPERATOR_MULT resolved as shift (ARITHMETIC_OPERATOR_MINUS < ARITHMETIC_OPERATOR_MULT).
    Conflict between rule 80 and token ARITHMETIC_OPERATOR_DIVISION resolved as shift (ARITHMETIC_OPERATOR_MINUS < ARITHMETIC_OPERATOR_DIVISION).
    Conflict between rule 80 and token ARITHMETIC_OPERATOR_MODULO resolved as shift (ARITHMETIC_OPERATOR_MINUS < ARITHMETIC_OPERATOR_MODULO).


State 87

   79 complex_expression: D_LEFT_PARENTHESIS expression • D_RIGHT_PARENTHESIS

    D_RIGHT_PARENTHESIS  shift, and go to state 131


State 88

   61 logic_expression: logic_expression RELATIONAL_OPERATOR_MORE_EQUALS • arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 132
    complex_expression     go to state 57


State 89

   62 logic_expression: logic_expression RELATIONAL_OPERATOR_LESS_EQUALS • arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 133
    complex_expression     go to state 57


State 90

   57 logic_expression: logic_expression RELATIONAL_OPERATOR_EQUALS • arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 134
    complex_expression     go to state 57


State 91

   58 logic_expression: logic_expression RELATIONAL_OPERATOR_NOTEQUALS • arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 135
    complex_expression     go to state 57


State 92

   60 logic_expression: logic_expression RELATIONAL_OPERATOR_LESS • arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 136
    complex_expression     go to state 57


State 93

   59 logic_expression: logic_expression RELATIONAL_OPERATOR_MORE • arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 137
    complex_expression     go to state 57


State 94

   63 logic_expression: logic_expression KW_AND • arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 138
    complex_expression     go to state 57


State 95

   64 logic_expression: logic_expression KW_OR • arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 139
    complex_expression     go to state 57


State 96

   72 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_EXP • complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    complex_expression  go to state 140


State 97

   67 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_PLUS • complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    complex_expression  go to state 141


State 98

   68 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_MINUS • complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    complex_expression  go to state 142


State 99

   69 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_MULT • complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    complex_expression  go to state 143


State 100

   70 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_DIVISION • complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    complex_expression  go to state 144


State 101

   71 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_MODULO • complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    complex_expression  go to state 145


State 102

   53 assign_vars: TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK •

    $default  reduce using rule 53 (assign_vars)


State 103

   40 single_const: KW_CONST declarations D_COLON KW_INTEGER • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 146


State 104

   41 single_const: KW_CONST declarations D_COLON KW_SCALAR • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 147


State 105

   42 single_const: KW_CONST declarations D_COLON KW_STR • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 148


State 106

   43 single_const: KW_CONST declarations D_COLON KW_BOOLEAN • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 149


State 107

   44 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON

    D_RIGHT_BLOCK  shift, and go to state 150


State 108

  115 single_argument: TK_IDENTIFIER • D_COLON KW_INTEGER
  116                | TK_IDENTIFIER • D_COLON KW_SCALAR
  117                | TK_IDENTIFIER • D_COLON KW_STR
  118                | TK_IDENTIFIER • D_COLON KW_BOOLEAN
  119                | TK_IDENTIFIER • D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_INTEGER
  120                | TK_IDENTIFIER • D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_SCALAR
  121                | TK_IDENTIFIER • D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_STR
  122                | TK_IDENTIFIER • D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_BOOLEAN
  123                | TK_IDENTIFIER • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER
  124                | TK_IDENTIFIER • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR
  125                | TK_IDENTIFIER • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR
  126                | TK_IDENTIFIER • D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN

    D_COLON       shift, and go to state 151
    D_LEFT_BLOCK  shift, and go to state 152


State 109

  111 single_function: KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments • D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    D_RIGHT_PARENTHESIS  shift, and go to state 153


State 110

  112 func_arguments: single_argument •  [D_RIGHT_PARENTHESIS]
  113               | single_argument • D_COMMA func_arguments

    D_COMMA  shift, and go to state 154

    $default  reduce using rule 112 (func_arguments)


State 111

   18 main_func: KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS • D_COLON code KW_ENDDEF D_SEMICOLON

    D_COLON  shift, and go to state 155


State 112

  111 single_function: KW_DEF • TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER  shift, and go to state 22


State 113

   21 single_comp: KW_COMP TK_IDENTIFIER D_COLON comp_var_decl • KW_ENDCOMP D_SEMICOLON
   23            | KW_COMP TK_IDENTIFIER D_COLON comp_var_decl • func_decl KW_ENDCOMP D_SEMICOLON
   25 comp_var_decl: comp_var_decl • single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
  109 func_decl: • single_function
  110          | • func_decl single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 1
    KW_DEF                              shift, and go to state 112
    KW_ENDCOMP                          shift, and go to state 156
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    single_var       go to state 157
    declarations     go to state 15
    assign_vars      go to state 16
    func_decl        go to state 158
    single_function  go to state 18


State 114

   24 comp_var_decl: single_var •

    $default  reduce using rule 24 (comp_var_decl)


State 115

   22 single_comp: KW_COMP TK_IDENTIFIER D_COLON func_decl • KW_ENDCOMP D_SEMICOLON
  110 func_decl: func_decl • single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    KW_DEF      shift, and go to state 112
    KW_ENDCOMP  shift, and go to state 159

    single_function  go to state 43


State 116

   51 declarations: ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations •

    $default  reduce using rule 51 (declarations)


State 117

   10 program_template: comp_decl var_decl func_decl main_func •

    $default  reduce using rule 10 (program_template)


State 118

    8 program_template: comp_decl const_decl var_decl main_func •

    $default  reduce using rule 8 (program_template)


State 119

    7 program_template: comp_decl const_decl var_decl func_decl • main_func
   18 main_func: • KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON
  110 func_decl: func_decl • single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    KW_DEF  shift, and go to state 3

    main_func        go to state 160
    single_function  go to state 43


State 120

    9 program_template: comp_decl const_decl func_decl main_func •

    $default  reduce using rule 9 (program_template)


State 121

   11 program_template: const_decl var_decl func_decl main_func •

    $default  reduce using rule 11 (program_template)


State 122

   32 single_var: declarations D_COLON TK_IDENTIFIER D_SEMICOLON •

    $default  reduce using rule 32 (single_var)


State 123

   28 single_var: declarations D_COLON KW_INTEGER D_SEMICOLON •

    $default  reduce using rule 28 (single_var)


State 124

   29 single_var: declarations D_COLON KW_SCALAR D_SEMICOLON •

    $default  reduce using rule 29 (single_var)


State 125

   30 single_var: declarations D_COLON KW_STR D_SEMICOLON •

    $default  reduce using rule 30 (single_var)


State 126

   31 single_var: declarations D_COLON KW_BOOLEAN D_SEMICOLON •

    $default  reduce using rule 31 (single_var)


State 127

   33 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_INTEGER D_SEMICOLON
   34           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_SCALAR D_SEMICOLON
   35           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_STR D_SEMICOLON
   36           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_BOOLEAN D_SEMICOLON
   37           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON TK_IDENTIFIER D_SEMICOLON

    D_COLON  shift, and go to state 161


State 128

  108 function_input: expression •

    $default  reduce using rule 108 (function_input)


State 129

   83 complex_expression: TK_IDENTIFIER D_LEFT_PARENTHESIS function_input • D_RIGHT_PARENTHESIS
  107 function_input: function_input • D_COMMA expression

    D_COMMA              shift, and go to state 162
    D_RIGHT_PARENTHESIS  shift, and go to state 163


State 130

   82 complex_expression: TK_IDENTIFIER D_LEFT_BLOCK expression • D_RIGHT_BLOCK

    D_RIGHT_BLOCK  shift, and go to state 164


State 131

   79 complex_expression: D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS •

    $default  reduce using rule 79 (complex_expression)


State 132

   61 logic_expression: logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]
   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 61 (logic_expression)


State 133

   62 logic_expression: logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]
   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 62 (logic_expression)


State 134

   57 logic_expression: logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]
   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 57 (logic_expression)


State 135

   58 logic_expression: logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]
   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 58 (logic_expression)


State 136

   60 logic_expression: logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]
   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 60 (logic_expression)


State 137

   59 logic_expression: logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]
   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 59 (logic_expression)


State 138

   63 logic_expression: logic_expression KW_AND arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]
   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 63 (logic_expression)


State 139

   64 logic_expression: logic_expression KW_OR arithmetic_expression •  [D_SEMICOLON, D_COMMA, D_COLON, RELATIONAL_OPERATOR_MORE_EQUALS, RELATIONAL_OPERATOR_LESS_EQUALS, RELATIONAL_OPERATOR_EQUALS, RELATIONAL_OPERATOR_NOTEQUALS, RELATIONAL_OPERATOR_LESS, RELATIONAL_OPERATOR_MORE, D_RIGHT_PARENTHESIS, D_LEFT_BLOCK, D_RIGHT_BLOCK, KW_AND, KW_OR]
   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101

    $default  reduce using rule 64 (logic_expression)


State 140

   72 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression •

    $default  reduce using rule 72 (arithmetic_expression)


State 141

   67 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression •

    $default  reduce using rule 67 (arithmetic_expression)


State 142

   68 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression •

    $default  reduce using rule 68 (arithmetic_expression)


State 143

   69 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression •

    $default  reduce using rule 69 (arithmetic_expression)


State 144

   70 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression •

    $default  reduce using rule 70 (arithmetic_expression)


State 145

   71 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression •

    $default  reduce using rule 71 (arithmetic_expression)


State 146

   40 single_const: KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON •

    $default  reduce using rule 40 (single_const)


State 147

   41 single_const: KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON •

    $default  reduce using rule 41 (single_const)


State 148

   42 single_const: KW_CONST declarations D_COLON KW_STR D_SEMICOLON •

    $default  reduce using rule 42 (single_const)


State 149

   43 single_const: KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON •

    $default  reduce using rule 43 (single_const)


State 150

   44 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_INTEGER D_SEMICOLON
   45             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_SCALAR D_SEMICOLON
   46             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_STR D_SEMICOLON
   47             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_BOOLEAN D_SEMICOLON

    D_COLON  shift, and go to state 165


State 151

  115 single_argument: TK_IDENTIFIER D_COLON • KW_INTEGER
  116                | TK_IDENTIFIER D_COLON • KW_SCALAR
  117                | TK_IDENTIFIER D_COLON • KW_STR
  118                | TK_IDENTIFIER D_COLON • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 166
    KW_SCALAR   shift, and go to state 167
    KW_STR      shift, and go to state 168
    KW_BOOLEAN  shift, and go to state 169


State 152

  119 single_argument: TK_IDENTIFIER D_LEFT_BLOCK • D_RIGHT_BLOCK D_COLON KW_INTEGER
  120                | TK_IDENTIFIER D_LEFT_BLOCK • D_RIGHT_BLOCK D_COLON KW_SCALAR
  121                | TK_IDENTIFIER D_LEFT_BLOCK • D_RIGHT_BLOCK D_COLON KW_STR
  122                | TK_IDENTIFIER D_LEFT_BLOCK • D_RIGHT_BLOCK D_COLON KW_BOOLEAN
  123                | TK_IDENTIFIER D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER
  124                | TK_IDENTIFIER D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR
  125                | TK_IDENTIFIER D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR
  126                | TK_IDENTIFIER D_LEFT_BLOCK • TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN

    TK_CONST_INT   shift, and go to state 170
    D_RIGHT_BLOCK  shift, and go to state 171


State 153

  111 single_function: KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS • return D_COLON func_code KW_ENDDEF D_SEMICOLON
  127 return: ε •  [D_COLON]
  128       | • ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_INTEGER
  129       | • ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_STR
  130       | • ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_SCALAR
  131       | • ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_BOOLEAN

    ASSIGNMENT_OPERATOR_ARROW_ASSIGN  shift, and go to state 172

    $default  reduce using rule 127 (return)

    return  go to state 173


State 154

  112 func_arguments: • single_argument
  113               | • single_argument D_COMMA func_arguments
  113               | single_argument D_COMMA • func_arguments
  114 single_argument: ε •  [D_COMMA, D_RIGHT_PARENTHESIS]
  115                | • TK_IDENTIFIER D_COLON KW_INTEGER
  116                | • TK_IDENTIFIER D_COLON KW_SCALAR
  117                | • TK_IDENTIFIER D_COLON KW_STR
  118                | • TK_IDENTIFIER D_COLON KW_BOOLEAN
  119                | • TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_INTEGER
  120                | • TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_SCALAR
  121                | • TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_STR
  122                | • TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_BOOLEAN
  123                | • TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER
  124                | • TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR
  125                | • TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR
  126                | • TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN

    TK_IDENTIFIER  shift, and go to state 108

    $default  reduce using rule 114 (single_argument)

    func_arguments   go to state 174
    single_argument  go to state 110


State 155

   18 main_func: KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON • code KW_ENDDEF D_SEMICOLON
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  101 code: • statement code
  102     | • single_var code
  103     | • single_const code
  104     | ε •  [KW_ENDDEF]
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    $default  reduce using rule 104 (code)

    single_var            go to state 182
    single_const          go to state 183
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 184
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    code                  go to state 189
    func_call             go to state 190


State 156

   21 single_comp: KW_COMP TK_IDENTIFIER D_COLON comp_var_decl KW_ENDCOMP • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 191


State 157

   25 comp_var_decl: comp_var_decl single_var •

    $default  reduce using rule 25 (comp_var_decl)


State 158

   23 single_comp: KW_COMP TK_IDENTIFIER D_COLON comp_var_decl func_decl • KW_ENDCOMP D_SEMICOLON
  110 func_decl: func_decl • single_function
  111 single_function: • KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON

    KW_DEF      shift, and go to state 112
    KW_ENDCOMP  shift, and go to state 192

    single_function  go to state 43


State 159

   22 single_comp: KW_COMP TK_IDENTIFIER D_COLON func_decl KW_ENDCOMP • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 193


State 160

    7 program_template: comp_decl const_decl var_decl func_decl main_func •

    $default  reduce using rule 7 (program_template)


State 161

   33 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_INTEGER D_SEMICOLON
   34           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_SCALAR D_SEMICOLON
   35           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_STR D_SEMICOLON
   36           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_BOOLEAN D_SEMICOLON
   37           | declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • TK_IDENTIFIER D_SEMICOLON

    TK_IDENTIFIER  shift, and go to state 194
    KW_INTEGER     shift, and go to state 195
    KW_SCALAR      shift, and go to state 196
    KW_STR         shift, and go to state 197
    KW_BOOLEAN     shift, and go to state 198


State 162

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
  107 function_input: function_input D_COMMA • expression

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 199
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 163

   83 complex_expression: TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS •

    $default  reduce using rule 83 (complex_expression)


State 164

   82 complex_expression: TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK •

    $default  reduce using rule 82 (complex_expression)


State 165

   44 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_INTEGER D_SEMICOLON
   45             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_SCALAR D_SEMICOLON
   46             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_STR D_SEMICOLON
   47             | KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_BOOLEAN D_SEMICOLON

    KW_INTEGER  shift, and go to state 200
    KW_SCALAR   shift, and go to state 201
    KW_STR      shift, and go to state 202
    KW_BOOLEAN  shift, and go to state 203


State 166

  115 single_argument: TK_IDENTIFIER D_COLON KW_INTEGER •

    $default  reduce using rule 115 (single_argument)


State 167

  116 single_argument: TK_IDENTIFIER D_COLON KW_SCALAR •

    $default  reduce using rule 116 (single_argument)


State 168

  117 single_argument: TK_IDENTIFIER D_COLON KW_STR •

    $default  reduce using rule 117 (single_argument)


State 169

  118 single_argument: TK_IDENTIFIER D_COLON KW_BOOLEAN •

    $default  reduce using rule 118 (single_argument)


State 170

  123 single_argument: TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_INTEGER
  124                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_SCALAR
  125                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_STR
  126                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT • D_RIGHT_BLOCK D_COLON KW_BOOLEAN

    D_RIGHT_BLOCK  shift, and go to state 204


State 171

  119 single_argument: TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK • D_COLON KW_INTEGER
  120                | TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK • D_COLON KW_SCALAR
  121                | TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK • D_COLON KW_STR
  122                | TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK • D_COLON KW_BOOLEAN

    D_COLON  shift, and go to state 205


State 172

  128 return: ASSIGNMENT_OPERATOR_ARROW_ASSIGN • KW_INTEGER
  129       | ASSIGNMENT_OPERATOR_ARROW_ASSIGN • KW_STR
  130       | ASSIGNMENT_OPERATOR_ARROW_ASSIGN • KW_SCALAR
  131       | ASSIGNMENT_OPERATOR_ARROW_ASSIGN • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 206
    KW_SCALAR   shift, and go to state 207
    KW_STR      shift, and go to state 208
    KW_BOOLEAN  shift, and go to state 209


State 173

  111 single_function: KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return • D_COLON func_code KW_ENDDEF D_SEMICOLON

    D_COLON  shift, and go to state 210


State 174

  113 func_arguments: single_argument D_COMMA func_arguments •

    $default  reduce using rule 113 (func_arguments)


State 175

   52 assign_vars: TK_IDENTIFIER •  [D_COMMA, D_COLON]
   53            | TK_IDENTIFIER • D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | TK_IDENTIFIER • ASSIGNMENT_OPERATOR_ASSIGN expression
   93 assignment_statement: TK_IDENTIFIER • ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | TK_IDENTIFIER • D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
  105 func_call: TK_IDENTIFIER • D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    ASSIGNMENT_OPERATOR_ASSIGN  shift, and go to state 211
    D_LEFT_PARENTHESIS          shift, and go to state 212
    D_LEFT_BLOCK                shift, and go to state 213

    $default  reduce using rule 52 (assign_vars)

    Conflict between rule 52 and token D_LEFT_BLOCK resolved as shift (not_sure < D_LEFT_BLOCK).


State 176

   95 if_statement: KW_IF • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | KW_IF • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON

    D_LEFT_PARENTHESIS  shift, and go to state 214


State 177

   97 for_statement: KW_FOR • TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | KW_FOR • TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON

    TK_IDENTIFIER  shift, and go to state 215


State 178

   99 while_statement: KW_WHILE • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON

    D_LEFT_PARENTHESIS  shift, and go to state 216


State 179

   89 statement: KW_BREAK • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 217


State 180

   90 statement: KW_CONTINUE • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 218


State 181

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   91 statement: KW_RETURN • D_SEMICOLON
   92          | KW_RETURN • expression D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    D_SEMICOLON                shift, and go to state 219
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 220
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 182

   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  101 code: • statement code
  102     | • single_var code
  102     | single_var • code
  103     | • single_const code
  104     | ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE, KW_ENDDEF]
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    $default  reduce using rule 104 (code)

    single_var            go to state 182
    single_const          go to state 183
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 184
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    code                  go to state 221
    func_call             go to state 190


State 183

   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  101 code: • statement code
  102     | • single_var code
  103     | • single_const code
  103     | single_const • code
  104     | ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE, KW_ENDDEF]
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    $default  reduce using rule 104 (code)

    single_var            go to state 182
    single_const          go to state 183
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 184
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    code                  go to state 222
    func_call             go to state 190


State 184

   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  101 code: • statement code
  101     | statement • code
  102     | • single_var code
  103     | • single_const code
  104     | ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE, KW_ENDDEF]
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    $default  reduce using rule 104 (code)

    single_var            go to state 182
    single_const          go to state 183
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 184
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    code                  go to state 223
    func_call             go to state 190


State 185

   84 statement: assignment_statement •

    $default  reduce using rule 84 (statement)


State 186

   85 statement: if_statement •

    $default  reduce using rule 85 (statement)


State 187

   87 statement: for_statement •

    $default  reduce using rule 87 (statement)


State 188

   86 statement: while_statement •

    $default  reduce using rule 86 (statement)


State 189

   18 main_func: KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code • KW_ENDDEF D_SEMICOLON

    KW_ENDDEF  shift, and go to state 224


State 190

   88 statement: func_call •

    $default  reduce using rule 88 (statement)


State 191

   21 single_comp: KW_COMP TK_IDENTIFIER D_COLON comp_var_decl KW_ENDCOMP D_SEMICOLON •

    $default  reduce using rule 21 (single_comp)


State 192

   23 single_comp: KW_COMP TK_IDENTIFIER D_COLON comp_var_decl func_decl KW_ENDCOMP • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 225


State 193

   22 single_comp: KW_COMP TK_IDENTIFIER D_COLON func_decl KW_ENDCOMP D_SEMICOLON •

    $default  reduce using rule 22 (single_comp)


State 194

   37 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 226


State 195

   33 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 227


State 196

   34 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 228


State 197

   35 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 229


State 198

   36 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 230


State 199

  107 function_input: function_input D_COMMA expression •

    $default  reduce using rule 107 (function_input)


State 200

   44 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 231


State 201

   45 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 232


State 202

   46 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 233


State 203

   47 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 234


State 204

  123 single_argument: TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_INTEGER
  124                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_SCALAR
  125                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_STR
  126                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK • D_COLON KW_BOOLEAN

    D_COLON  shift, and go to state 235


State 205

  119 single_argument: TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON • KW_INTEGER
  120                | TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON • KW_SCALAR
  121                | TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON • KW_STR
  122                | TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 236
    KW_SCALAR   shift, and go to state 237
    KW_STR      shift, and go to state 238
    KW_BOOLEAN  shift, and go to state 239


State 206

  128 return: ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_INTEGER •

    $default  reduce using rule 128 (return)


State 207

  130 return: ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_SCALAR •

    $default  reduce using rule 130 (return)


State 208

  129 return: ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_STR •

    $default  reduce using rule 129 (return)


State 209

  131 return: ASSIGNMENT_OPERATOR_ARROW_ASSIGN KW_BOOLEAN •

    $default  reduce using rule 131 (return)


State 210

   26 var_decl: • single_var
   27         | • var_decl single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   38 const_decl: • single_const
   39           | • const_decl single_const
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON
  111 single_function: KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON • func_code KW_ENDDEF D_SEMICOLON
  132 func_code: • var_decl const_decl statements
  133          | • var_decl statements
  134          | • const_decl statements
  135          | • statements
  136 statements: • statement
  137           | • statement statements

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    var_decl              go to state 240
    single_var            go to state 12
    const_decl            go to state 241
    single_const          go to state 14
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 242
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    func_call             go to state 190
    func_code             go to state 243
    statements            go to state 244


State 211

   54 assign_vars: TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN • expression
   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   93 assignment_statement: TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN • expression D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 245
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 212

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
  105 func_call: TK_IDENTIFIER D_LEFT_PARENTHESIS • function_input D_RIGHT_PARENTHESIS D_SEMICOLON
  106 function_input: ε •  [D_COMMA, D_RIGHT_PARENTHESIS]
  107               | • function_input D_COMMA expression
  108               | • expression

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    $default  reduce using rule 106 (function_input)

    expression             go to state 128
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57
    function_input         go to state 246


State 213

   53 assign_vars: TK_IDENTIFIER D_LEFT_BLOCK • expression D_RIGHT_BLOCK
   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   94 assignment_statement: TK_IDENTIFIER D_LEFT_BLOCK • expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 247
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 214

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   95 if_statement: KW_IF D_LEFT_PARENTHESIS • expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | KW_IF D_LEFT_PARENTHESIS • expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 248
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 215

   97 for_statement: KW_FOR TK_IDENTIFIER • KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | KW_FOR TK_IDENTIFIER • KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON

    KW_IN  shift, and go to state 249


State 216

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   99 while_statement: KW_WHILE D_LEFT_PARENTHESIS • expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 250
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 217

   89 statement: KW_BREAK D_SEMICOLON •

    $default  reduce using rule 89 (statement)


State 218

   90 statement: KW_CONTINUE D_SEMICOLON •

    $default  reduce using rule 90 (statement)


State 219

   91 statement: KW_RETURN D_SEMICOLON •

    $default  reduce using rule 91 (statement)


State 220

   92 statement: KW_RETURN expression • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 251


State 221

  102 code: single_var code •

    $default  reduce using rule 102 (code)


State 222

  103 code: single_const code •

    $default  reduce using rule 103 (code)


State 223

  101 code: statement code •

    $default  reduce using rule 101 (code)


State 224

   18 main_func: KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 252


State 225

   23 single_comp: KW_COMP TK_IDENTIFIER D_COLON comp_var_decl func_decl KW_ENDCOMP D_SEMICOLON •

    $default  reduce using rule 23 (single_comp)


State 226

   37 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON •

    $default  reduce using rule 37 (single_var)


State 227

   33 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON •

    $default  reduce using rule 33 (single_var)


State 228

   34 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON •

    $default  reduce using rule 34 (single_var)


State 229

   35 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON •

    $default  reduce using rule 35 (single_var)


State 230

   36 single_var: declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON •

    $default  reduce using rule 36 (single_var)


State 231

   44 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON •

    $default  reduce using rule 44 (single_const)


State 232

   45 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON •

    $default  reduce using rule 45 (single_const)


State 233

   46 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON •

    $default  reduce using rule 46 (single_const)


State 234

   47 single_const: KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON •

    $default  reduce using rule 47 (single_const)


State 235

  123 single_argument: TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_INTEGER
  124                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_SCALAR
  125                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_STR
  126                | TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 253
    KW_SCALAR   shift, and go to state 254
    KW_STR      shift, and go to state 255
    KW_BOOLEAN  shift, and go to state 256


State 236

  119 single_argument: TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_INTEGER •

    $default  reduce using rule 119 (single_argument)


State 237

  120 single_argument: TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_SCALAR •

    $default  reduce using rule 120 (single_argument)


State 238

  121 single_argument: TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_STR •

    $default  reduce using rule 121 (single_argument)


State 239

  122 single_argument: TK_IDENTIFIER D_LEFT_BLOCK D_RIGHT_BLOCK D_COLON KW_BOOLEAN •

    $default  reduce using rule 122 (single_argument)


State 240

   27 var_decl: var_decl • single_var
   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   38 const_decl: • single_const
   39           | • const_decl single_const
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON
  132 func_code: var_decl • const_decl statements
  133          | var_decl • statements
  136 statements: • statement
  137           | • statement statements

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    single_var            go to state 33
    const_decl            go to state 257
    single_const          go to state 14
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 242
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    func_call             go to state 190
    statements            go to state 258


State 241

   39 const_decl: const_decl • single_const
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON
  134 func_code: const_decl • statements
  136 statements: • statement
  137           | • statement statements

    TK_IDENTIFIER  shift, and go to state 259
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 176
    KW_FOR         shift, and go to state 177
    KW_WHILE       shift, and go to state 178
    KW_BREAK       shift, and go to state 179
    KW_CONTINUE    shift, and go to state 180
    KW_RETURN      shift, and go to state 181

    single_const          go to state 37
    statement             go to state 242
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    func_call             go to state 190
    statements            go to state 260


State 242

   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON
  136 statements: • statement
  136           | statement •  [KW_ENDDEF]
  137           | • statement statements
  137           | statement • statements

    TK_IDENTIFIER  shift, and go to state 259
    KW_IF          shift, and go to state 176
    KW_FOR         shift, and go to state 177
    KW_WHILE       shift, and go to state 178
    KW_BREAK       shift, and go to state 179
    KW_CONTINUE    shift, and go to state 180
    KW_RETURN      shift, and go to state 181

    $default  reduce using rule 136 (statements)

    statement             go to state 242
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    func_call             go to state 190
    statements            go to state 261


State 243

  111 single_function: KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code • KW_ENDDEF D_SEMICOLON

    KW_ENDDEF  shift, and go to state 262


State 244

  135 func_code: statements •

    $default  reduce using rule 135 (func_code)


State 245

   54 assign_vars: TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression •  [D_COMMA, D_COLON, D_LEFT_BLOCK]
   93 assignment_statement: TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 263

    $default  reduce using rule 54 (assign_vars)


State 246

  105 func_call: TK_IDENTIFIER D_LEFT_PARENTHESIS function_input • D_RIGHT_PARENTHESIS D_SEMICOLON
  107 function_input: function_input • D_COMMA expression

    D_COMMA              shift, and go to state 162
    D_RIGHT_PARENTHESIS  shift, and go to state 264


State 247

   53 assign_vars: TK_IDENTIFIER D_LEFT_BLOCK expression • D_RIGHT_BLOCK
   94 assignment_statement: TK_IDENTIFIER D_LEFT_BLOCK expression • D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON

    D_RIGHT_BLOCK  shift, and go to state 265


State 248

   95 if_statement: KW_IF D_LEFT_PARENTHESIS expression • D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | KW_IF D_LEFT_PARENTHESIS expression • D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON

    D_RIGHT_PARENTHESIS  shift, and go to state 266


State 249

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN • D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN • D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON

    D_LEFT_BLOCK  shift, and go to state 267


State 250

   99 while_statement: KW_WHILE D_LEFT_PARENTHESIS expression • D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON

    D_RIGHT_PARENTHESIS  shift, and go to state 268


State 251

   92 statement: KW_RETURN expression D_SEMICOLON •

    $default  reduce using rule 92 (statement)


State 252

   18 main_func: KW_DEF KW_MAIN D_LEFT_PARENTHESIS D_RIGHT_PARENTHESIS D_COLON code KW_ENDDEF D_SEMICOLON •

    $default  reduce using rule 18 (main_func)


State 253

  123 single_argument: TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER •

    $default  reduce using rule 123 (single_argument)


State 254

  124 single_argument: TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR •

    $default  reduce using rule 124 (single_argument)


State 255

  125 single_argument: TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR •

    $default  reduce using rule 125 (single_argument)


State 256

  126 single_argument: TK_IDENTIFIER D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN •

    $default  reduce using rule 126 (single_argument)


State 257

   39 const_decl: const_decl • single_const
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON
  132 func_code: var_decl const_decl • statements
  136 statements: • statement
  137           | • statement statements

    TK_IDENTIFIER  shift, and go to state 259
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 176
    KW_FOR         shift, and go to state 177
    KW_WHILE       shift, and go to state 178
    KW_BREAK       shift, and go to state 179
    KW_CONTINUE    shift, and go to state 180
    KW_RETURN      shift, and go to state 181

    single_const          go to state 37
    statement             go to state 242
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    func_call             go to state 190
    statements            go to state 269


State 258

  133 func_code: var_decl statements •

    $default  reduce using rule 133 (func_code)


State 259

   93 assignment_statement: TK_IDENTIFIER • ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | TK_IDENTIFIER • D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
  105 func_call: TK_IDENTIFIER • D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    ASSIGNMENT_OPERATOR_ASSIGN  shift, and go to state 270
    D_LEFT_PARENTHESIS          shift, and go to state 212
    D_LEFT_BLOCK                shift, and go to state 271


State 260

  134 func_code: const_decl statements •

    $default  reduce using rule 134 (func_code)


State 261

  137 statements: statement statements •

    $default  reduce using rule 137 (statements)


State 262

  111 single_function: KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 272


State 263

   93 assignment_statement: TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON •

    $default  reduce using rule 93 (assignment_statement)


State 264

  105 func_call: TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 273


State 265

   53 assign_vars: TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK •  [D_COMMA, D_COLON, D_LEFT_BLOCK]
   94 assignment_statement: TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK • ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON

    ASSIGNMENT_OPERATOR_ASSIGN  shift, and go to state 274

    $default  reduce using rule 53 (assign_vars)


State 266

   95 if_statement: KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS • D_COLON code KW_ENDIF D_SEMICOLON
   96             | KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS • D_COLON code else_clause KW_ENDIF D_SEMICOLON

    D_COLON  shift, and go to state 275


State 267

   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK • arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK • arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 276
    complex_expression     go to state 57


State 268

   99 while_statement: KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS • D_COLON code KW_ENDWHILE D_SEMICOLON

    D_COLON  shift, and go to state 277


State 269

  132 func_code: var_decl const_decl statements •

    $default  reduce using rule 132 (func_code)


State 270

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   93 assignment_statement: TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN • expression D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 278
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 271

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   94 assignment_statement: TK_IDENTIFIER D_LEFT_BLOCK • expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 279
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 272

  111 single_function: KW_DEF TK_IDENTIFIER D_LEFT_PARENTHESIS func_arguments D_RIGHT_PARENTHESIS return D_COLON func_code KW_ENDDEF D_SEMICOLON •

    $default  reduce using rule 111 (single_function)


State 273

  105 func_call: TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON •

    $default  reduce using rule 105 (func_call)


State 274

   55 expression: • logic_expression
   56 logic_expression: • arithmetic_expression
   57                 | • logic_expression RELATIONAL_OPERATOR_EQUALS arithmetic_expression
   58                 | • logic_expression RELATIONAL_OPERATOR_NOTEQUALS arithmetic_expression
   59                 | • logic_expression RELATIONAL_OPERATOR_MORE arithmetic_expression
   60                 | • logic_expression RELATIONAL_OPERATOR_LESS arithmetic_expression
   61                 | • logic_expression RELATIONAL_OPERATOR_MORE_EQUALS arithmetic_expression
   62                 | • logic_expression RELATIONAL_OPERATOR_LESS_EQUALS arithmetic_expression
   63                 | • logic_expression KW_AND arithmetic_expression
   64                 | • logic_expression KW_OR arithmetic_expression
   65                 | • KW_NOT arithmetic_expression
   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   94 assignment_statement: TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN • expression D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    KW_NOT                     shift, and go to state 50
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    expression             go to state 280
    logic_expression       go to state 55
    arithmetic_expression  go to state 56
    complex_expression     go to state 57


State 275

   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   95             | KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON • code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   96             | KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON • code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  101 code: • statement code
  102     | • single_var code
  103     | • single_const code
  104     | ε •  [KW_ELSE, KW_ENDIF]
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    $default  reduce using rule 104 (code)

    single_var            go to state 182
    single_const          go to state 183
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 184
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    code                  go to state 281
    func_call             go to state 190


State 276

   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression
   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression • D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression • D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON

    D_COLON                       shift, and go to state 282
    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101


State 277

   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
   99                | KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON • code KW_ENDWHILE D_SEMICOLON
  101 code: • statement code
  102     | • single_var code
  103     | • single_const code
  104     | ε •  [KW_ENDWHILE]
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    $default  reduce using rule 104 (code)

    single_var            go to state 182
    single_const          go to state 183
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 184
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    code                  go to state 283
    func_call             go to state 190


State 278

   93 assignment_statement: TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 263


State 279

   94 assignment_statement: TK_IDENTIFIER D_LEFT_BLOCK expression • D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON

    D_RIGHT_BLOCK  shift, and go to state 284


State 280

   94 assignment_statement: TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 285


State 281

   95 if_statement: KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code • KW_ENDIF D_SEMICOLON
   96             | KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code • else_clause KW_ENDIF D_SEMICOLON
  100 else_clause: • KW_ELSE D_COLON code

    KW_ELSE   shift, and go to state 286
    KW_ENDIF  shift, and go to state 287

    else_clause  go to state 288


State 282

   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON • arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON • arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 289
    complex_expression     go to state 57


State 283

   99 while_statement: KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code • KW_ENDWHILE D_SEMICOLON

    KW_ENDWHILE  shift, and go to state 290


State 284

   94 assignment_statement: TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK • ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON

    ASSIGNMENT_OPERATOR_ASSIGN  shift, and go to state 274


State 285

   94 assignment_statement: TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON •

    $default  reduce using rule 94 (assignment_statement)


State 286

  100 else_clause: KW_ELSE • D_COLON code

    D_COLON  shift, and go to state 291


State 287

   95 if_statement: KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 292


State 288

   96 if_statement: KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause • KW_ENDIF D_SEMICOLON

    KW_ENDIF  shift, and go to state 293


State 289

   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression
   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression • D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression • D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON

    D_COLON                       shift, and go to state 294
    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101
    D_RIGHT_BLOCK                 shift, and go to state 295


State 290

   99 while_statement: KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 296


State 291

   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  100 else_clause: KW_ELSE D_COLON • code
  101 code: • statement code
  102     | • single_var code
  103     | • single_const code
  104     | ε •  [KW_ENDIF]
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    $default  reduce using rule 104 (code)

    single_var            go to state 182
    single_const          go to state 183
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 184
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    code                  go to state 297
    func_call             go to state 190


State 292

   95 if_statement: KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON •

    $default  reduce using rule 95 (if_statement)


State 293

   96 if_statement: KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 298


State 294

   66 arithmetic_expression: • complex_expression
   67                      | • arithmetic_expression ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | • arithmetic_expression ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | • arithmetic_expression ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | • arithmetic_expression ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | • arithmetic_expression ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | • arithmetic_expression ARITHMETIC_OPERATOR_EXP complex_expression
   73 complex_expression: • TK_IDENTIFIER
   74                   | • TK_CONST_INT
   75                   | • TK_CONST_FLOAT
   76                   | • TK_CONST_STRING
   77                   | • KW_TRUE
   78                   | • KW_FALSE
   79                   | • D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS
   80                   | • ARITHMETIC_OPERATOR_MINUS arithmetic_expression
   81                   | • ARITHMETIC_OPERATOR_PLUS arithmetic_expression
   82                   | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   83                   | • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS
   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON • arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON

    TK_IDENTIFIER              shift, and go to state 44
    TK_CONST_INT               shift, and go to state 45
    TK_CONST_FLOAT             shift, and go to state 46
    TK_CONST_STRING            shift, and go to state 47
    KW_TRUE                    shift, and go to state 48
    KW_FALSE                   shift, and go to state 49
    ARITHMETIC_OPERATOR_PLUS   shift, and go to state 51
    ARITHMETIC_OPERATOR_MINUS  shift, and go to state 52
    D_LEFT_PARENTHESIS         shift, and go to state 53

    arithmetic_expression  go to state 299
    complex_expression     go to state 57


State 295

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK • D_COLON code KW_ENDFOR D_SEMICOLON

    D_COLON  shift, and go to state 300


State 296

   99 while_statement: KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON •

    $default  reduce using rule 99 (while_statement)


State 297

  100 else_clause: KW_ELSE D_COLON code •

    $default  reduce using rule 100 (else_clause)


State 298

   96 if_statement: KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON •

    $default  reduce using rule 96 (if_statement)


State 299

   67 arithmetic_expression: arithmetic_expression • ARITHMETIC_OPERATOR_PLUS complex_expression
   68                      | arithmetic_expression • ARITHMETIC_OPERATOR_MINUS complex_expression
   69                      | arithmetic_expression • ARITHMETIC_OPERATOR_MULT complex_expression
   70                      | arithmetic_expression • ARITHMETIC_OPERATOR_DIVISION complex_expression
   71                      | arithmetic_expression • ARITHMETIC_OPERATOR_MODULO complex_expression
   72                      | arithmetic_expression • ARITHMETIC_OPERATOR_EXP complex_expression
   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression • D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON

    ARITHMETIC_OPERATOR_EXP       shift, and go to state 96
    ARITHMETIC_OPERATOR_PLUS      shift, and go to state 97
    ARITHMETIC_OPERATOR_MINUS     shift, and go to state 98
    ARITHMETIC_OPERATOR_MULT      shift, and go to state 99
    ARITHMETIC_OPERATOR_DIVISION  shift, and go to state 100
    ARITHMETIC_OPERATOR_MODULO    shift, and go to state 101
    D_RIGHT_BLOCK                 shift, and go to state 301


State 300

   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   97              | KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON • code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  101 code: • statement code
  102     | • single_var code
  103     | • single_const code
  104     | ε •  [KW_ENDFOR]
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    $default  reduce using rule 104 (code)

    single_var            go to state 182
    single_const          go to state 183
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 184
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    code                  go to state 302
    func_call             go to state 190


State 301

   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK • D_COLON code KW_ENDFOR D_SEMICOLON

    D_COLON  shift, and go to state 303


State 302

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code • KW_ENDFOR D_SEMICOLON

    KW_ENDFOR  shift, and go to state 304


State 303

   28 single_var: • declarations D_COLON KW_INTEGER D_SEMICOLON
   29           | • declarations D_COLON KW_SCALAR D_SEMICOLON
   30           | • declarations D_COLON KW_STR D_SEMICOLON
   31           | • declarations D_COLON KW_BOOLEAN D_SEMICOLON
   32           | • declarations D_COLON TK_IDENTIFIER D_SEMICOLON
   33           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   34           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   35           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   36           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   37           | • declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON TK_IDENTIFIER D_SEMICOLON
   40 single_const: • KW_CONST declarations D_COLON KW_INTEGER D_SEMICOLON
   41             | • KW_CONST declarations D_COLON KW_SCALAR D_SEMICOLON
   42             | • KW_CONST declarations D_COLON KW_STR D_SEMICOLON
   43             | • KW_CONST declarations D_COLON KW_BOOLEAN D_SEMICOLON
   44             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_INTEGER D_SEMICOLON
   45             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_SCALAR D_SEMICOLON
   46             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_STR D_SEMICOLON
   47             | • KW_CONST declarations D_LEFT_BLOCK TK_CONST_INT D_RIGHT_BLOCK D_COLON KW_BOOLEAN D_SEMICOLON
   48 declarations: • assign_vars
   49             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars
   50             | • assign_vars D_COMMA declarations
   51             | • ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN assign_vars D_COMMA declarations
   52 assign_vars: • TK_IDENTIFIER
   53            | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK
   54            | • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression
   84 statement: • assignment_statement
   85          | • if_statement
   86          | • while_statement
   87          | • for_statement
   88          | • func_call
   89          | • KW_BREAK D_SEMICOLON
   90          | • KW_CONTINUE D_SEMICOLON
   91          | • KW_RETURN D_SEMICOLON
   92          | • KW_RETURN expression D_SEMICOLON
   93 assignment_statement: • TK_IDENTIFIER ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   94                     | • TK_IDENTIFIER D_LEFT_BLOCK expression D_RIGHT_BLOCK ASSIGNMENT_OPERATOR_ASSIGN expression D_SEMICOLON
   95 if_statement: • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDIF D_SEMICOLON
   96             | • KW_IF D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code else_clause KW_ENDIF D_SEMICOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON • code KW_ENDFOR D_SEMICOLON
   99 while_statement: • KW_WHILE D_LEFT_PARENTHESIS expression D_RIGHT_PARENTHESIS D_COLON code KW_ENDWHILE D_SEMICOLON
  101 code: • statement code
  102     | • single_var code
  103     | • single_const code
  104     | ε •  [KW_ENDFOR]
  105 func_call: • TK_IDENTIFIER D_LEFT_PARENTHESIS function_input D_RIGHT_PARENTHESIS D_SEMICOLON

    TK_IDENTIFIER                       shift, and go to state 175
    KW_CONST                            shift, and go to state 2
    KW_IF                               shift, and go to state 176
    KW_FOR                              shift, and go to state 177
    KW_WHILE                            shift, and go to state 178
    KW_BREAK                            shift, and go to state 179
    KW_CONTINUE                         shift, and go to state 180
    KW_RETURN                           shift, and go to state 181
    ASSIGNMENT_OPERATOR_HASHTAG_ASSIGN  shift, and go to state 5

    $default  reduce using rule 104 (code)

    single_var            go to state 182
    single_const          go to state 183
    declarations          go to state 15
    assign_vars           go to state 16
    statement             go to state 184
    assignment_statement  go to state 185
    if_statement          go to state 186
    for_statement         go to state 187
    while_statement       go to state 188
    code                  go to state 305
    func_call             go to state 190


State 304

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 306


State 305

   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code • KW_ENDFOR D_SEMICOLON

    KW_ENDFOR  shift, and go to state 307


State 306

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON •

    $default  reduce using rule 97 (for_statement)


State 307

   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR • D_SEMICOLON

    D_SEMICOLON  shift, and go to state 308


State 308

   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN D_LEFT_BLOCK arithmetic_expression D_COLON arithmetic_expression D_COLON arithmetic_expression D_RIGHT_BLOCK D_COLON code KW_ENDFOR D_SEMICOLON •

    $default  reduce using rule 98 (for_statement)
